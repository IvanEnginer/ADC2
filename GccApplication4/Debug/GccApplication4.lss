
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ae  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000074  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000062  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000a0  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_16>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_16>:
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(ADC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	unsigned int ADCdata;
	ADCdata= ADCW;
  7c:	84 b1       	in	r24, 0x04	; 4
  7e:	95 b1       	in	r25, 0x05	; 5
	if (ADCdata > (2046 / 5))
  80:	8a 39       	cpi	r24, 0x9A	; 154
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	92 07       	cpc	r25, r18
  86:	18 f0       	brcs	.+6      	; 0x8e <__vector_16+0x22>
	PORTD = 3;
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	08 c0       	rjmp	.+16     	; 0x9e <__vector_16+0x32>
	else if (ADCdata < (1023 / 5))
  8e:	8c 3c       	cpi	r24, 0xCC	; 204
  90:	91 05       	cpc	r25, r1
  92:	18 f4       	brcc	.+6      	; 0x9a <__vector_16+0x2e>
	PORTD = 6;
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	82 bb       	out	0x12, r24	; 18
  98:	02 c0       	rjmp	.+4      	; 0x9e <__vector_16+0x32>
	else
	PORTD = 5;		
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	82 bb       	out	0x12, r24	; 18
	ADCSRA |= 1<<ADSC;
  9e:	36 9a       	sbi	0x06, 6	; 6
}
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	2f 91       	pop	r18
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:

int main(void)
{
	DDRD = 7;
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	81 bb       	out	0x11, r24	; 17
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 0<<ADPS0;
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= 1<<ADIE;
  ba:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 1<<ADEN;
  bc:	37 9a       	sbi	0x06, 7	; 6
	
	ADMUX |= 1<<REFS0 | 1<<REFS1;
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	87 b9       	out	0x07, r24	; 7
	ADMUX |= 0<<MUX4 | 0<<MUX3 | 0<<MUX2 | 0<<MUX1 | 0<<MUX0;
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	87 b9       	out	0x07, r24	; 7

	sei();
  c8:	78 94       	sei
	
	ADCSRA |= 1<<ADSC;
  ca:	36 9a       	sbi	0x06, 6	; 6
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x1c>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
